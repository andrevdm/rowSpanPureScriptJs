{"version":3,"sources":["babel/collapseTableArray.js"],"names":["collapseTableArray","tableArray","R","isEmpty","collapse","map","cols","fixed","reduce","row","skip","acc","skipCols","zip","nextCols","p","filter","f","nextSkip","span","res","concat"],"mappings":"2xBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAMA,oBAAqB,QAArBA,mBAAqB,CAACC,UAAD,CAAgB,CACzC,GAAIC,EAAEC,OAAF,CAAUF,UAAV,CAAJ,CAA2B,CACzB,MAAO,EACR,CAED;AACA,GAAIG,UAAWF,EAAEG,GAAF,CAAO,kBAAK,EAAL,CAAP,CAAeJ,WAAW,CAAX,EAAcK,IAA7B,CAAf,CAEA,GAAIC,OAAQL,EAAEM,MAAF,CACV,cAAaC,GAAb,CAAqB,qCAAnBC,KAAmB,aAAbC,IAAa,UACnB;AACA,GAAMC,UAAWV,EAAEW,GAAF,CAAOH,IAAP,CAAaD,IAAIH,IAAjB,CAAjB,CACA;AACA,GAAMQ,UAAWZ,EAAEG,GAAF,CAAO,kBAAKU,GAAE,CAAF,CAAL,CAAP,CAAkBb,EAAEc,MAAF,CAAU,kBAAKC,GAAE,CAAF,GAAQ,CAAb,CAAV,CAA0BL,QAA1B,CAAlB,CAAjB,CACA;AACA,GAAMM,UAAWhB,EAAEG,GAAF,CAAO,kBAAKU,GAAE,CAAF,GAAQ,CAAR,CAAYA,EAAE,CAAF,EAAKI,IAAL,CAAY,CAAxB,CAA4BJ,EAAE,CAAF,EAAO,CAAxC,CAAP,CAAkDH,QAAlD,CAAjB,CAEA,GAAMQ,KAAMlB,EAAEmB,MAAF,CAAUV,GAAV,CAAe,aAAKF,GAAL,EAAUH,KAAKQ,QAAf,GAAf,CAAZ,CACA,MAAO,CAACI,QAAD,CAAWE,GAAX,CACR,CAXS,CAYV,CAAChB,QAAD,CAAU,EAAV,CAZU,CAaVH,UAbU,CAAZ,CAeA,MAAOM,OAAM,CAAN,CACR,CAxBD,CAyBA","file":"collapseTableArray.js","sourcesContent":["//--------------------------------------------------------------------------------------------\n// Helper functions\n//--------------------------------------------------------------------------------------------\n// collapseTableArray :: [ {cols: [{span:Int, ...}], ...} ] -> [{cols: [{span:Int, ...}], ...]\n// Used to help generating a HTML table with rowSpans\n// The span param indicates how many rows should be joined, i.e. the rowspan\n// The output array will only have values that should be rendered as TDs\n//\n// e.g. (assuming you are using the \"val\" field to hold the text, not that for react you would need a unique key per row & col as well)\n//  var arr = [ {rowId:1, cols: [{span:2, val:\"1.1\"}, {span:3, val:\"1.2\"}, {span:1, val:\"1.3\"}, {span:1, val:\"1.4\"}]}\n//             ,{rowId:2, cols: [{span:0, val:\"2.1\"}, {span:0, val:\"2.2\"}, {span:3, val:\"2.3\"}, {span:1, val:\"2.4\"}]}\n//             ,{rowId:3, cols: [{span:2, val:\"3.1\"}, {span:0, val:\"3.2\"}, {span:3, val:\"3.3\"}, {span:1, val:\"3.4\"}]}\n//             ,{rowId:4, cols: [{span:0, val:\"4.1\"}, {span:1, val:\"4.2\"}, {span:3, val:\"4.3\"}, {span:1, val:\"4.4\"}]}\n//            ];\n//\n//  collapseTableArray( arr ) will give you\n//  [ {rowId:1, cols: [{span:2, val:\"1.1\"}, {span:3, val:\"1.2\"}, {span:1, val:\"1.3\"}, {span:1, val:\"1.4\"}]}\n//   ,{rowId:2, cols: [{span:3, val:\"2.3\"}, {span:1, val:\"2.4\"}]}\n//   ,{rowId:3, cols: [{span:2, val:\"3.1\"}, {span:1, val:\"3.4\"}]}\n//   ,{rowId:4, cols: [{span:1, val:\"4.2\"}, {span:1, val:\"4.4\"}]}\n//  ];\n//\n//  you can then easily rener this as a table like this \n//    +-----+-----+-----+-----+\n//    | 1.1 | 1.2 | 1.3 | 1.4 |\n//    +     +     +-----+-----+\n//    |     |     | 2.3 | 2.4 |\n//    +-----+     +-----+-----+\n//    | 3.1 |     |     | 3.4 |\n//    +     +-----+     +-----+\n//    |     | 4.2 |     | 4.4 |\n//    +-----+-----+-----+-----+\n//\n//\nconst collapseTableArray = (tableArray) => {\n  if( R.isEmpty(tableArray) ){\n    return [];\n  }\n  \n  //First collapse array is just a 0 for each col on first row\n  var collapse = R.map( a => 0, tableArray[0].cols );\n\n  var fixed = R.reduce(\n    ([skip, acc],row) => {\n      //combine the skip list and cols\n      const skipCols = R.zip( skip, row.cols )\n      //Get the col that should not be skipped (2nd item from each of the filtered pair)\n      const nextCols = R.map( p => p[1], R.filter( f => f[0] <= 0, skipCols ) )\n      //Calculate next skip. Look at prev skip, use the rowSpan from tableArray once the previous span has been used up\n      const nextSkip = R.map( p => p[0] == 0 ? p[1].span - 1 : p[0] - 1, skipCols )\n\n      const res = R.concat( acc, [{...row, cols:nextCols}] );\n      return [nextSkip, res];\n    },\n    [collapse,[]],\n    tableArray );\n\n  return fixed[1];\n}\n//--------------------------------------------------------------------------------------------\n"]}